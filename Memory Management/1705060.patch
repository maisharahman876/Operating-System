diff --git a/Makefile b/Makefile
index 09d790c..fa00575 100644
--- a/Makefile
+++ b/Makefile
@@ -167,6 +167,7 @@ mkfs: mkfs.c fs.h
 
 UPROGS=\
 	_cat\
+	_test\
 	_echo\
 	_forktest\
 	_grep\
@@ -217,7 +218,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -248,7 +249,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c test.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/defs.h b/defs.h
index 82fb982..63353a1 100644
--- a/defs.h
+++ b/defs.h
@@ -52,6 +52,11 @@ struct inode*   nameiparent(char*, char*);
 int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
+int             createSwapFile(struct proc* p);
+int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
+int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
+int             removeSwapFile(struct proc* p);
+
 
 // ide.c
 void            ideinit(void);
@@ -124,6 +129,11 @@ void            yield(void);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
+// sysfile
+struct inode*   create(char *path, short type, short major, short minor);
+int             isdirempty(struct inode *dp);
+
+
 // spinlock.c
 void            acquire(struct spinlock*);
 void            getcallerpcs(void*, uint*);
@@ -185,6 +195,8 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+//pde_t *  walkpgdir(pde_t *pgdir, const void *va, int);
+int pageInSwapFile(pde_t *pgdir, uint va);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/fs.c b/fs.c
index f77275f..2df24e5 100644
--- a/fs.c
+++ b/fs.c
@@ -668,3 +668,145 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+// NEW FOR PAGING
+
+#include "fcntl.h"
+#define DIGITS 14
+
+
+char* itoa(int i, char b[]){
+    char const digit[] = "0123456789";
+    char* p = b;
+    if(i<0){
+        *p++ = '-';
+        i *= -1;
+    }
+    int shifter = i;
+    do{ //Move to where representation ends
+        ++p;
+        shifter = shifter/10;
+    }while(shifter);
+    *p = '\0';
+    do{ //Move back, inserting digits as u go
+        *--p = digit[i%10];
+        i = i/10;
+    }while(i);
+    return b;
+}
+
+//remove swap file of proc p;
+int
+removeSwapFile(struct proc* p)
+{
+	//path of proccess
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+	struct inode *ip, *dp;
+	struct dirent de;
+	char name[DIRSIZ];
+	uint off;
+
+	if(0 == p->swapFile)
+	{
+		return -1;
+	}
+	fileclose(p->swapFile);
+
+	begin_op();
+	if((dp = nameiparent(path, name)) == 0)
+	{
+		end_op();
+		return -1;
+	}
+
+	ilock(dp);
+
+	  // Cannot unlink "." or "..".
+	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+	   goto bad;
+
+	if((ip = dirlookup(dp, name, &off)) == 0)
+		goto bad;
+	ilock(ip);
+
+	if(ip->nlink < 1)
+		panic("unlink: nlink < 1");
+	if(ip->type == T_DIR && !isdirempty(ip)){
+		iunlockput(ip);
+		goto bad;
+	}
+
+	memset(&de, 0, sizeof(de));
+	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+		panic("unlink: writei");
+	if(ip->type == T_DIR){
+		dp->nlink--;
+		iupdate(dp);
+	}
+	iunlockput(dp);
+
+	ip->nlink--;
+	iupdate(ip);
+	iunlockput(ip);
+
+	end_op();
+
+	return 0;
+
+	bad:
+		iunlockput(dp);
+		end_op();
+		return -1;
+
+}
+
+
+//return 0 on success
+int
+createSwapFile(struct proc* p)
+{
+
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+    begin_op();
+    struct inode * in = create(path, T_FILE, 0, 0);
+	iunlock(in);
+
+	p->swapFile = filealloc();
+	if (p->swapFile == 0)
+		panic("no slot for files on /store");
+
+	p->swapFile->ip = in;
+	p->swapFile->type = FD_INODE;
+	p->swapFile->off = 0;
+	p->swapFile->readable = O_WRONLY;
+	p->swapFile->writable = O_RDWR;
+    end_op();
+
+    return 0;
+}
+
+//return as sys_write (-1 when error)
+int
+writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return filewrite(p->swapFile, buffer, size);
+
+}
+
+//return as sys_read (-1 when error)
+int
+readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return fileread(p->swapFile, buffer,  size);
+}
+
diff --git a/mmu.h b/mmu.h
index a82d8e2..aec4420 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,8 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
+#define PTE_PG          0x200   // Paged out to secondary storage
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/proc.c b/proc.c
index 806b1b1..f9eb81f 100644
--- a/proc.c
+++ b/proc.c
@@ -6,8 +6,10 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include <stddef.h>
 
-struct {
+struct
+{
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -20,32 +22,32 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+void pinit(void)
 {
   initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags() & FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
+  {
     if (cpus[i].apicid == apicid)
       return &cpus[i];
   }
@@ -54,8 +56,9 @@ mycpu(void)
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   struct cpu *c;
   struct proc *p;
   pushcli();
@@ -70,7 +73,7 @@ myproc(void) {
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
@@ -78,8 +81,8 @@ allocproc(void)
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == UNUSED)
       goto found;
 
   release(&ptable.lock);
@@ -88,11 +91,18 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->no_of_mem_pages = 0;
+  p->no_of_pages = 0;
+  p->Ramhead=NULL;
+  p->Ramtail=NULL;
+  p->Filehead=NULL;
+  p->Filetail=NULL;
 
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
+  {
     p->state = UNUSED;
     return 0;
   }
@@ -100,33 +110,59 @@ found:
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+  p->tf = (struct trapframe *)sp;
+  if (p!=0&&p->pid > 2)
+  {
+    cprintf("Creating Swap file!\n");
+    createSwapFile(p);
+    /*for (int i = 0; i < MAX_TOTAL_PAGES - MAX_PSYC_PAGES; i++)
+    {
+      p->FileMetaData[i]->state = NOTUSED;
+      p->FileMetaData[i]->next=NULL;
+      p->FileMetaData[i]->prev=NULL;
+      p->FileMetaData[i]->accessCount=0;
+      //p->FileMetaData[i]->virtualAddress=0xfffffff;
+    }
+    for (int i = 0; i < MAX_PSYC_PAGES; i++)
+    {
+      p->RamMetaData[i]->state = NOTUSED;
+      p->RamMetaData[i]->next=NULL;
+      p->RamMetaData[i]->prev=NULL;
+      p->RamMetaData[i]->accessCount=0;
+      //p->RamMetaData[i]->virtualAddress=0xfffffff;
+    }
+    cprintf("Initialized Metadata!\n");*/
+      
+  }
 
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
-
+  *(uint *)sp = (uint)trapret;
+  
   sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+
+  p->context = (struct context *)sp;
+
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
-
+  if(p->pid>2)
+  cprintf("Allocation successful!\n");
   return p;
+  
 }
 
 //PAGEBREAK: 32
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
@@ -137,7 +173,7 @@ userinit(void)
   p->tf->ss = p->tf->ds;
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
+  p->tf->eip = 0; // beginning of initcode.S
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -155,18 +191,19 @@ userinit(void)
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
-
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0)
+  {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  }
+  else if (n < 0)
+  {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -177,20 +214,21 @@ growproc(int n)
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
-
+  
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
-
+  
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+  {
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
@@ -200,11 +238,34 @@ fork(void)
   np->parent = curproc;
   *np->tf = *curproc->tf;
 
+  if (curproc->pid > 2&&curproc!=0)
+  {
+
+    np->Ramhead=curproc->Ramhead;
+    np->Filehead=curproc->Filehead;
+    np->Ramtail=curproc->Ramtail;
+    np->Filetail=curproc->Filetail;
+    //copy pages from parent to child
+    char Buffer[PGSIZE];
+    struct page* temp=curproc->Filehead;
+    int i=0;
+    while(temp!=NULL)
+    {
+      if (temp->state == USED)
+      {
+          readFromSwapFile(curproc, Buffer, i * PGSIZE, PGSIZE);
+        
+          writeToSwapFile(np, Buffer, i * PGSIZE, PGSIZE);
+      }
+      temp=temp->next;
+    }
+  }
+
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
@@ -221,27 +282,48 @@ fork(void)
   return pid;
 }
 
+
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
-void
-exit(void)
+void exit(void)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd])
+    {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
   }
+  if(curproc->pid>2&& curproc!=0)
+  {
+  
+    if(removeSwapFile(curproc)!=0)
+    {
+      struct page* temp=curproc->Ramhead;
+      while(temp!=NULL)
+      {
+        temp->state=NOTUSED;
+        temp=temp->next;
+      }
+      struct page* temp1=curproc->Filehead;
+      while(temp1!=NULL)
+      {
+        temp1->state=NOTUSED;
+        temp1=temp1->next;
+      }
+    }
 
+  }
   begin_op();
   iput(curproc->cwd);
   end_op();
@@ -253,10 +335,12 @@ exit(void)
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->parent == curproc)
+    {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
         wakeup1(initproc);
     }
   }
@@ -269,22 +353,25 @@ exit(void)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+int wait(void)
 {
+  
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
   
   acquire(&ptable.lock);
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE)
+      {
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -301,13 +388,14 @@ wait(void)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed)
+    {
       release(&ptable.lock);
       return -1;
     }
 
     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    sleep(curproc, &ptable.lock); //DOC: wait-sleep
   }
 }
 
@@ -319,21 +407,22 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
-void
-scheduler(void)
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;)
+  {
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->state != RUNNABLE)
         continue;
 
       // Switch to chosen process.  It is the process's job
@@ -351,7 +440,6 @@ scheduler(void)
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -362,19 +450,18 @@ scheduler(void)
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
     panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -382,10 +469,9 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
+  acquire(&ptable.lock); //DOC: yieldlock
   myproc()->state = RUNNABLE;
   sched();
   release(&ptable.lock);
@@ -393,14 +479,14 @@ yield(void)
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 
-  if (first) {
+  if (first)
+  {
     // Some initialization functions must be run in the context
     // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
@@ -414,15 +500,15 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -431,8 +517,9 @@ sleep(void *chan, struct spinlock *lk)
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
+  if (lk != &ptable.lock)
+  {                        //DOC: sleeplock0
+    acquire(&ptable.lock); //DOC: sleeplock1
     release(lk);
   }
   // Go to sleep.
@@ -445,7 +532,8 @@ sleep(void *chan, struct spinlock *lk)
   p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
+  if (lk != &ptable.lock)
+  { //DOC: sleeplock2
     release(&ptable.lock);
     acquire(lk);
   }
@@ -459,14 +547,13 @@ wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == SLEEPING && p->chan == chan)
       p->state = RUNNABLE;
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   acquire(&ptable.lock);
   wakeup1(chan);
@@ -476,17 +563,18 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
   acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)
+    {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
         p->state = RUNNABLE;
       release(&ptable.lock);
       return 0;
@@ -500,35 +588,70 @@ kill(int pid)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [EMBRYO] "embryo",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
+  uint page_mapping[50];
+  int count = 0;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+
+    cprintf("Process : \n\n%d %s %s", p->pid, state, p->name);
+    if (p->state == SLEEPING)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
+    //memory location of page directory
+    cprintf("\nPage tables:\n\nMemory Location of page directory = %d\n", V2P(p->pgdir));
+    for (int i = 0; i < 512; i++)
+    {
+      //for each page directory elements
+      if ((PTE_FLAGS(p->pgdir[i]) & PTE_A) && (PTE_FLAGS(p->pgdir[i]) & PTE_U))
+      {
+        pte_t *page_table = (pte_t *)PTE_ADDR(p->pgdir[i]);
+        uint pte_no_without_flags = (uint)page_table >> 12;
+        cprintf("\npdir PTE %d, %d :", i, pte_no_without_flags);
+        cprintf("\n\n Memory Location of Page Table : %d\n", page_table);
+        for (int j = 0; j < NPTENTRIES; j++)
+        {
+          pte_t *page_table_entry = (pte_t *)((pte_t *)P2V(page_table))[j];
+
+          if ((PTE_FLAGS(page_table_entry) & PTE_A) && (PTE_FLAGS(page_table_entry) & PTE_U))
+          {
+            uint pte_no_without_flags1 = (uint)page_table_entry >> 12;
+            cprintf("\n   ptbl PTE %d, %d, %d", j, pte_no_without_flags1, PTE_ADDR(page_table_entry));
+            page_mapping[count] = (uint)V2P(page_table_entry);
+            count++;
+          }
+        }
+        cprintf("\n");
+      }
+    }
+    cprintf("\n");
+    for (int i = 0; i < count; i++)
+    {
+      cprintf("%d -> %d\n", page_mapping[i] >> 12, (V2P(page_mapping[i])) >> 12);
+    }
+    cprintf("\n");
   }
 }
diff --git a/proc.h b/proc.h
index 1647114..e545ab0 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,5 @@
+#define MAX_PSYC_PAGES 15
+#define MAX_TOTAL_PAGES 30
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -49,6 +51,15 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  //Swap file. must initiate with create swap file
+  struct file *swapFile;
+  uint no_of_pages;
+  uint no_of_mem_pages;	
+  
+  struct page* Ramhead;
+  struct page* Ramtail;
+    struct page* Filehead;
+  struct page* Filetail;
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +67,13 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+enum pagestate { NOTUSED, USED };
+struct page
+{
+  uint virtualAddress;
+  uint accessCount;
+  uint offset;
+  enum pagestate state;
+  struct page* prev;
+  struct page* next;
+};
\ No newline at end of file
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..bf3848e 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -165,7 +165,7 @@ bad:
 }
 
 // Is the directory dp empty except for "." and ".." ?
-static int
+int
 isdirempty(struct inode *dp)
 {
   int off;
@@ -238,7 +238,7 @@ bad:
   return -1;
 }
 
-static struct inode*
+struct inode*
 create(char *path, short type, short major, short minor)
 {
   struct inode *ip, *dp;
diff --git a/trap.c b/trap.c
index 41c66eb..6ea8a4c 100644
--- a/trap.c
+++ b/trap.c
@@ -7,6 +7,7 @@
 #include "x86.h"
 #include "traps.h"
 #include "spinlock.h"
+#include <stddef.h>
 
 // Interrupt descriptor table (shared by all CPUs).
 struct gatedesc idt[256];
@@ -77,7 +78,45 @@ trap(struct trapframe *tf)
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
-
+  
+  case T_PGFLT:{
+    struct proc* p=myproc();
+    if(p!=0&&p->pid>2&&(tf->cs & 3) == 3)
+    {
+      pte_t* pte;
+      pte=walkpgdir(p->pgdir,(void*)rcr2(),0);
+      if(PageInSwapFile(p->pgdir,rcr2()))
+      {
+        uint va=PGROUNDDOWN(rcr2());
+        char* newpg=kalloc();
+        memset(newpg,0,PGSIZE);
+        lcr3(V2P(p->pgdir));
+        pte |= PTE_P | PTE_W | PTE_U;      //Turn on needed bits
+        *pte &= ~PTE_PG;                    //Turn off inFile bit
+        *pte |= V2P(newpg);                  //Map PTE to the new Page
+        struct page* temp=p->Filehead;
+        int i=0;
+        while(temp!=NULL)
+        {
+          if(temp->virtualAddress==va)
+          {
+            if(readFromSwapFile(p,(char*)va,i*PGSIZE,PGSIZE)!=PGSIZE)
+            break;
+            temp->state=NOTUSED;
+            p->no_of_mem_pages--;
+            p->Ramtail->next=temp;
+            temp->prev=p->Ramtail;
+            p->Ramtail=temp;
+            break;
+          }
+          temp=temp->next;
+          i++;
+        }
+        
+      }
+    }
+    break;
+  }
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
diff --git a/vm.c b/vm.c
index 7134cff..58a68d3 100644
--- a/vm.c
+++ b/vm.c
@@ -6,6 +6,7 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include <stddef.h>
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
@@ -53,6 +54,12 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
   }
   return &pgtab[PTX(va)];
 }
+int PageInSwapFile(pde_t *pgdir,uint va)
+{
+  pte_t *pte;
+  pte = walkpgdir(pgdir, (char *)va, 0);
+  return (*pte & PTE_PG);
+}
 
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
@@ -221,6 +228,7 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
 int
 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
+  
   char *mem;
   uint a;
 
@@ -228,9 +236,15 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
     return 0;
   if(newsz < oldsz)
     return oldsz;
-
+  struct proc* p=myproc();
+  if(PGROUNDUP(newsz)/PGSIZE > MAX_TOTAL_PAGES&&p->pid>2)
+  {
+    return 0;
+  }
+  
   a = PGROUNDUP(oldsz);
   for(; a < newsz; a += PGSIZE){
+    
     mem = kalloc();
     if(mem == 0){
       cprintf("allocuvm out of memory\n");
@@ -244,6 +258,90 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       kfree(mem);
       return 0;
     }
+    if(p!=0&&p->pid>2){
+    if((p->no_of_pages<MAX_PSYC_PAGES))
+    {
+      struct page g;
+      struct page* pg=&g;
+      pg->virtualAddress=a;
+      pg->state=USED;
+      pg->offset=p->no_of_pages*PGSIZE;
+      pg->accessCount=1;
+
+      if(p->Ramhead==NULL)
+      {
+        p->Ramhead=pg;
+        p->Ramtail=pg;
+      }
+      else{
+        struct page* temp=p->Ramtail;
+        p->Ramtail=pg;
+        temp->next=p->Ramtail;
+        p->Ramtail->prev=temp;
+
+      }
+      p->no_of_pages++;
+      //cprintf("allocating page to RAM of %d no for pid %d\n",p->no_of_pages,p->pid);
+      
+
+    }
+    else{
+
+      cprintf("want to swap out page\n");
+      struct page* s=p->Ramhead;
+      while(s->state==UNUSED)
+      {
+        s=s->next;
+      }
+      p->Ramhead=s;
+      pte_t* pte=walkpgdir(pgdir,(void*)s->virtualAddress,0);
+      for(int i=0; i < PGSIZE*PGSIZE/4; i++)
+        pte = walkpgdir(pgdir, (void*)s->virtualAddress, 0);
+      uint address;
+      if(!pte)
+        address= 0xFFFFFFFF;
+      else
+        address=PTE_ADDR(pte);
+      
+      struct page g;
+      struct page* pg=&g;
+      pg->virtualAddress=a;
+      pg->state=USED;
+      pg->offset=p->no_of_mem_pages*PGSIZE;
+      pg->accessCount=1;
+      p->Ramtail->next=pg;
+      pg->prev=p->Ramtail;
+      p->Ramtail=pg;
+      if(p->Filehead==NULL)
+      {
+        p->Filehead=s;
+        p->Filetail=s;
+      }
+      else{
+        struct page* temp=p->Filetail;
+        p->Filetail=s;
+        temp->next=p->Filetail;
+        p->Filetail->prev=temp;
+
+      }
+      writeToSwapFile(p,(char*)s->virtualAddress,s->offset,PGSIZE);
+      
+      p->no_of_mem_pages++;
+      char *va = (char*)P2V(address);
+      kfree(va);
+      *pte |= PTE_PG;           // Inidicates that the page was Paged-out to secondary storage
+      *pte &= ~PTE_P;           // Indicates that the page is NOT in physical memory
+      *pte &= PTE_FLAGS(*pte);
+      lcr3(V2P(pgdir));
+      struct page* temp=p->Ramhead; 
+      while(temp!=NULL)
+      {
+        temp->offset-=PGSIZE;
+        temp=temp->next;
+      }
+    cprintf(" swap out page\n");
+    }
+    }
   }
   return newsz;
 }
@@ -257,7 +355,7 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   pte_t *pte;
   uint a, pa;
-
+  //struct proc* p=myproc();
   if(newsz >= oldsz)
     return oldsz;
 
@@ -272,6 +370,28 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
+      
+      if(p!=0&&p->pid>2){
+      struct page* temp=p->Ramhead;
+      while(temp!=NULL)
+      {
+        if(temp->state==USED&&temp->virtualAddress==a)
+        {
+          p->no_of_pages--;
+          temp->state=NOTUSED;
+          if(temp==p->Ramhead)
+          {
+            p->Ramhead=temp->next;
+          }
+          if(temp==p->Ramtail)
+          {
+            p->Ramtail=temp->prev;
+          }
+          
+        }
+        temp=temp->next;
+      }
+      }
       *pte = 0;
     }
   }
@@ -325,6 +445,15 @@ copyuvm(pde_t *pgdir, uint sz)
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
+    if (*pte & PTE_PG){
+      pte_t *pte = walkpgdir(pgdir, (int*)i, 0);
+      *pte |= PTE_PG;           // Inidicates that the page was Paged-out to secondary storage
+      *pte &= ~PTE_P;           // Indicates that the page is NOT in physical memory
+      *pte &= PTE_FLAGS(*pte);    
+      lcr3(V2P(pgdir));      // Refresh CR3 register (TLB (cache))
+      continue;
+    }
+    
     if(!(*pte & PTE_P))
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
